#LAB subir um banco azure sql, criar tabelas e alguns registros, criar um app em nodejs simples conectando no banco e acessando a url com os dados do banco retornando.
#A aplicação subirá em um appservice

#Para evitar conflitos durante a realização deste laboratório, cada aluno deverá usar um identificador único para os nomes dos recursos criados. Uma sugestão seria usar suas iniciais seguidas do ano de nascimento. Por exemplo, se o aluno se chama "João Paulo" e nasceu em 1990, o identificador único seria "jp1990". Então, onde você ver "[identificador]",
#substitua por seu identificador único. Por exemplo, o grupo de recursos para o aluno "João Paulo" ficaria "aulafinalresourcegroupjp1990"

#BAIXE O README E EDITE seu tutorial para usar suas credenciais

wget https://raw.githubusercontent.com/able2cloud/cloud_public/main/aula_final_labs/basic_api/README

# troque td1989 para suas iniciais e sua data de nascimento exemplo do comando joao paulo que nasceu em 1990
sed -i 's/td1989/jp1990/g' README





#Pré-requisitos
#Uma conta Azure for Students. Isso fornece $100 em crédito Azure.
#Acesso ao Azure Cloud Shell, uma experiência de shell interativa baseada em navegador que a Microsoft oferece.
#Laboratório
#1. Autenticação e Configuração do Azure Cloud Shell
#Primeiramente, faça login no Azure Portal - portal.azure.com

#Clique no ícone >_ no canto superior direito do portal Azure para abrir o Cloud Shell.

#Selecione a opção Bash  (Neste guia, estaremos usando Bash).
#Importante:

#No início do uso do Cloud Shell, será necessário autenticar a sessão. Para isso, digite:
az login

#Siga as instruções na tela para autenticação.

#2. Criação do Grupo de Recursos
#Execute o seguinte comando para criar um grupo de recursos na localização eastus.

az group create --name aulafinalresourcegrouptd1989 --location eastus

#3. Criação da Instância SQL
#Agora, vamos criar uma instância de um servidor SQL.

az sql server create --name aulafinalservertd1989 --resource-group aulafinalresourcegrouptd1989 --location eastus --admin-user aulafinalusertd1989 --admin-password Aulafinalpassword1
#4. Criação do Banco de Dados
#Vamos criar um banco de dados chamado aulafinaldatabase.

az sql db create --resource-group aulafinalresourcegrouptd1989 --server aulafinalservertd1989 --name aulafinaldatabasetd1989 --service-objective S0

#5. Configuração do Firewall
#Para acessar o banco de dados, precisamos configurar as regras do firewall.

az sql server firewall-rule create --resource-group aulafinalresourcegrouptd1989 --server aulafinalservertd1989 --name AllowAll --start-ip-address 0.0.0.0 --end-ip-address 255.255.255.255

#6. Interagindo com o Banco de Dados
pip install mssql-cli

#7 . logue no banco:
mssql-cli -S aulafinalservertd1989.database.windows.net -d aulafinaldatabasetd1989 -U aulafinalusertd1989 -P Aulafinalpassword1

#8: 
#Agora estamos conectados ao banco de dados. Vamos criar uma tabela simples. Por exemplo, uma tabela chamada "Estudantes" com três campos: Id, Nome, e Curso.
CREATE TABLE Estudantes
(
    Id INT PRIMARY KEY,
    Nome NVARCHAR(50),
    Curso NVARCHAR(50)
);

#Agora, vamos inserir alguns registros na tabela.
#copie o conteudo e cole no terminal

INSERT INTO Estudantes VALUES (1, 'Maria', 'Ciência da Computação');
INSERT INTO Estudantes VALUES (2, 'João', 'Engenharia de Software');
INSERT INTO Estudantes VALUES (3, 'Ana', 'Engenharia de Dados');
INSERT INTO Estudantes VALUES (4, 'Pedro', 'Inteligência Artificial');
INSERT INTO Estudantes VALUES (5, 'Carla', 'Big Data');
INSERT INTO Estudantes VALUES (6, 'Paulo', 'Cloud Computing');


#Podemos verificar se os registros foram inseridos corretamente com um simples SELECT.

SELECT * FROM Estudantes;

--------------------------------------------------------------------------------------------------------------------------------------
# Agora que configuramos o banco vamos configurar uma aplicação no appservice


#baixe o arquivo app.js
#e o arquivo package.json

wget https://raw.githubusercontent.com/able2cloud/cloud_public/main/aula_final_labs/basic_api/app.js 
wget https://raw.githubusercontent.com/able2cloud/cloud_public/main/aula_final_labs/basic_api/package.json 

# troque as iniciais no arquivo da aplicacao para conectar no banco que vc criou, TROQUE jp1990 pelas suas iniciais
sed -i 's/td1989/jp1990/g' app.js


#instale as dependências com o comando:

npm install

#Compacte a aplicação em um arquivo zip. O Azure App Service requer que a aplicação seja carregada como um arquivo zip. Execute o seguinte comando para criar um arquivo zip com todos os arquivos no diretório atual (isso incluirá app.js, package.json e a pasta node_modules):

zip -r app.zip app.js package.json node_modules/   

#O Azure App Service é um serviço de computação em nuvem da Microsoft Azure que permite aos desenvolvedores hospedar, criar e gerenciar aplicativos e serviços web.
#Crie o App Service. Agora você pode criar o App Service, que será o local onde a sua aplicação será hospedada. Execute os seguintes comandos para criar o App Service:
##
#Atenção em virtude da gestao do dns, pois o appservice usa o nome da aplicação para o SUBDOMINIO: na instrução:
#--name teacheraulafinalapp    troque de teacheraulafinalapp  para seu nome: exemplo: mariaaulafinalapp


az appservice plan create --name aulafinalserviceplantd1989 --resource-group aulafinalresourcegrouptd1989 --sku B1 --is-linux

az webapp create --resource-group aulafinalresourcegrouptd1989 --plan aulafinalserviceplan --name teacheraulafinalapptd1989 --runtime "NODE|14-lts"

#Configure o arquivo de inicialização do App Service. O App Service precisa saber qual arquivo usar para iniciar a aplicação. Neste caso, será o arquivo app.js. Execute o seguinte comando para configurar o arquivo de inicialização:

az webapp config set --resource-group aulafinalresourcegrouptd1989 --name teacheraulafinalapptd1989 --startup-file app.js 

az webapp deployment source config-zip --resource-group aulafinalresourcegrouptd1989 --name teacheraulafinalapptd1989 --src app.zip
#URL: exemplo:
http://teacheraulafinalapptd1989.azurewebsites.net/estudantes







# ATENCAO só no fim da aula exclua os recursos

#Finalmente, lembre-se de excluir a instância do servidor SQL e o appservice quando terminar suas operações para evitar custos desnecessários.

az sql server delete --name aulafinalservertd1989 --resource-group aulafinalresourcegrouptd1989 --yes
az webapp delete --name teacheraulafinalapptd1989 --resource-group aulafinalresourcegrouptd1989
az group delete --name aulafinalresourcegrouptd1989 --no-wait

